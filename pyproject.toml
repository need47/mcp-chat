[project]
name = "mcp-chat"
version = "0.1.0"
description = "Enhanced FastMCP Client with LangChain LLM Integration"
requires-python = ">=3.13"
authors = [
    {name = "need47", email = "need47@gmail.com"},
]
keywords = ["mcp", "llm", "langchain", "ai", "chat", "pubchem"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    # Core MCP and HTTP dependencies
    "fastmcp>=2.12.3",
    "aiohttp>=3.8.0",
    "httpx[http2]>=0.28.1",
    "mcp[cli]>=1.14.1",
    # UI and utilities
    "rich>=13.0.0",
    "python-dotenv>=1.1.1",
    "gnureadline>=8.2.13",
    # LangChain integrations
    "langchain>=0.3.27",
    "langchain-core>=0.3.27",
    "langchain-openai>=0.3.33",
    "langchain-anthropic>=0.3.20",
    "langchain-google-genai>=2.1.12",
    "langchain-mistralai>=0.2.12",
    "langchain-community>=0.3.30",
    # LLM API clients
    "openai>=1.0.0",
    "anthropic>=0.68.0",
    "langchain-groq>=0.3.8",
    "langchain-ollama>=0.3.10",
]

[dependency-groups]
dev = [
    "icecream>=2.1.8",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/mcp-chat"
Repository = "https://github.com/mcp-chat"
Issues = "https://github.com/mcp-chat/issues"
Documentation = "https://github.com/mcp-chat#readme"

[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/pyproject.toml",
]

[tool.black]
line-length = 120
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py313"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C4", # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow",
    "integration: marks tests as integration tests",
]

[tool.basedpyright]
# reportUnusedCallResult = false
# reportUnknownMemberType = false
# reportUnknownVariableType = false
# reportUnknownArgumentType = false
# reportAny = false
# reportUnusedParameter = false
# reportUnknownParameterType = false
# reportMissingTypeArgument = false
# reportExplicitAny = false
typeCheckingMode = "basic"
reportArgumentType = false
reportAttributeAccessIssue = false
reportReturnType = false
reportOptionalMemberAccess = false
reportCallIssue = false

[tool.ty.rules]
invalid-argument-type = "ignore"
unknown-argument = "ignore"
# invalid-return-type = "ignore"
